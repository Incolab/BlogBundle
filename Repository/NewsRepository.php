<?php

namespace Incolab\BlogBundle\Repository;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends \Doctrine\ORM\EntityRepository
{
    public function getIndex($limit, $offset, $nbCaracters)
    {
        $news = $this->createQueryBuilder('n')
            ->where('n.isPublished = true')
            ->orderBy('n.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->getQuery()->getResult();
        
        foreach ($news as $element) {
            $element->setContent(strip_tags($element->getContent()));
            if (strlen($element->getContent()) > $nbCaracters) {
                $debut = substr($element->getContent(), 0, $nbCaracters);
                $debut = substr($debut, 0, strrpos($debut, ' ')).'...';

                $element->setContent($debut);
            }
        }
        
        return $news;
    }
    
    public function getByCreatedAtDESC()
    {
        $news = $this->createQueryBuilder('n')
        ->orderBy('n.createdAt', 'DESC')
        ->getQuery()->getResult();
        
        return $news;
    }
    
    public function getOneAndCommentsBySlugByCreatedAtASC($slug)
    {
        $news = $this->createQueryBuilder('n')
            ->leftJoin('n.author', 'a')
            ->leftJoin('n.comments', 'c')
            ->leftJoin('c.author', 'b')
            ->addSelect('a')
            ->addSelect('c')
            ->addSelect('b')
            ->where('n.slug = :slug AND n.isPublished = true')
            ->orderBy('c.createdAt', 'ASC')
            ->setParameter(':slug', $slug)->getQuery()->getOneOrNullResult();
            
        return $news;
    }
    
    public function getLastsDESCAndSub($nbNews, $nbCaracters)
    {
        $news = $this->createQueryBuilder('n')
        ->where('n.isPublished = true')
        ->orderBy('n.createdAt', 'DESC')
        ->getQuery()->setMaxResults($nbNews)->getResult();
        
        
        foreach ($news as $element) {
            $element->setContent(strip_tags($element->getContent()));
            if (strlen($element->getContent()) > $nbCaracters) {
                $debut = substr($element->getContent(), 0, $nbCaracters);
                $debut = substr($debut, 0, strrpos($debut, ' ')).'...';

                $element->setContent($debut);
            }
        }
        
        return $news;
        
    }
    
    public function getTotalPublishedNumber()
    {
        $totalNewsNumber = $this->createQueryBuilder('n')
        ->where('n.isPublished = true')
        ->select('count (n.id)')
        ->getQuery()->getSingleScalarResult();
        
        return $totalNewsNumber;
    }
}
